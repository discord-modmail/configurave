import pytest

from configurave import ConfigEntry as ce
from configurave import ConfigError, make_config

"""
Apply basic tests to configurave config loading.
"""


@pytest.mark.dependency(name="load_dotenv")
def test_validate_sources_env():
    """Test env sources are validated properly."""
    try:
        from dotenv import load_dotenv
    except ImportError:
        pytest.skip("dotenv not installed")

    from configurave import validate_sources

    validate_sources(["ENV"])


def test_validate_sources_env_dotenv_not_installed():
    """Test env source errors properly when dotenv is not installed."""
    import configurave
    from configurave import load_dotenv, validate_sources

    if load_dotenv is not None:
        pytest.skip("dotenv is installed")

    with pytest.raises(ConfigError):
        validate_sources(["ENV"])


@pytest.mark.dependency(depends=["load_dotenv"])
def test_everything():
    """We can create and load a configuration from our test config folder."""
    # TODO: split this up and write better tests

    @make_config()
    class Config:
        """The test configuration for configurave."""

        root_url: str = ce(
            comment="The root url configuration for the application",
            description="A long ass multiline description goes here about all the options"
            " you could potentially decide upon using.",
        )

    c = Config(
        sources=[  # in order of priority
            "tests/test-config/config.toml",
            "ENV",  # Temporarily enabled, needs seperate optional dotenv test
        ]
    )

    assert "root_url" in str(c._crve_configs)
    assert c.root_url == "test url"

    default_toml = (
        "# The test configuration for configurave.\n"
        "# This is an autogenerated default configuration file written by Configurave\n\n"
        "# (str): The root url configuration for the application\n"
        "# root_url = \n"
        "# Description: A long ass multiline description goes here about all the\n"
        "#  options you could potentially decide upon using.\n"
    )
    assert c.defaults_toml() == default_toml


def test_secret():
    """We can create and load a configuration from our test config folder."""
    # TODO: split this up and write better tests

    @make_config()
    class Config:
        """The test configuration for configurave."""

        root_url: str = ce(
            comment="The root url configuration for the application",
            description="A long ass multiline description goes here about all the options"
            " you could potentially decide upon using.",
        )
        token: str = ce(
            comment="The discord token for your bot",
            secret=True,
        )

    c = Config(
        sources=[  # in order of priority
            "tests/test-config/secrets.toml",
        ]
    )

    assert "token" in str(c._crve_configs)
    assert c.token == "secret token"

    default_toml = (
        "# The test configuration for configurave.\n"
        "# This is an autogenerated default configuration file written by Configurave\n\n"
        "# (str): The root url configuration for the application\n"
        "# root_url = \n"
        "# Description: A long ass multiline description goes here about all the\n"
        "#  options you could potentially decide upon using.\n"
        "\n"
        "# (str): The discord token for your bot\n"
        "# Secret: value will not be exported\n"
        "token =\n"
    )
    assert c.defaults_toml() == default_toml
